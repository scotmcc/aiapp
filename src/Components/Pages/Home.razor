@page "/"

<h3>System Test!</h3>

<div class="input-group input-group-sm mt-3">
    <span class="input-group-text">API URL</span>
    <textarea class="form-control">@ApiResponse</textarea>
    <button class="btn btn-outline-primary" type="button" @onclick="TestApi">
        <i class="fas fa-redo"></i>
    </button>
</div>

<div class="mt-3 card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Ollama Chat</h5>
        <button class="btn btn-outline-danger" type="button">
            <i class="fas fa-undo"></i>
        </button>
    </div>
    <div class="card-body" style="height: 300px; overflow-y: auto;">
        @foreach (var message in ChatService.Messages)
        {
            <div class="alert alert-@(message.Role == "user" ? "primary" : "success") message">
                @((MarkupString) Markdown.ToHtml(message.Content ?? ""))
            </div>
        }
    </div>
    <div class="card-footer d-flex input-group input-group-sm">
        <textarea class="form-control" @bind="OllamaRequest" @bind:event="oninput" @onkeydown="OnKeyDownChat"
            disabled=@ChatLoading></textarea>
        <button class="btn btn-outline-primary" type="button" @onclick="TestOllamaApi" disabled=@ChatLoading>
            <i class="fas fa-paper-plane"></i>
        </button>
    </div>
</div>

<div class="input-group input-group-sm mt-3">
    <textarea class="form-control" @bind="VoiceRequest" @bind:event="oninput" @onkeydown="OnKeyDownChat"
        disabled=@VoiceLoading></textarea>
    <button class="btn btn-outline-primary" type="button" @onclick="TestVoice" disabled=@VoiceLoading>
        <i class="fas fa-paper-plane"></i>
    </button>
</div>

<script>
    function PlayAudio(path) {
        var audio = new Audio(path);
        audio.play();
        delete audio;
    };
</script>

@inject IJSRuntime JSRuntime
@inject IApiService ApiService
@inject IVoiceService VoiceService
@inject IChatService ChatService

@code {
    private string ApiResponse { get; set; } = string.Empty;
    private string OllamaResponse { get; set; } = string.Empty;
    private string OllamaRequest { get; set; } = string.Empty;
    private string VoiceRequest { get; set; } = string.Empty;
    private bool ChatLoading { get; set; } = false;
    private bool VoiceLoading { get; set; } = false;
    protected override void OnInitialized()
    {
        ChatService.OnUpdate += async () =>
        {
            ChatLoading = false;
            await InvokeAsync(StateHasChanged);
        };
        VoiceService.OnUpdate += async (string path) =>
        {
            VoiceLoading = false;
            await JSRuntime.InvokeVoidAsync("PlayAudio", path);
            await InvokeAsync(StateHasChanged);
        };
    }
    [Inject] private IHttpClientFactory HttpClientFactory { get; set; } = default!;
    private async void TestApi()
    {
        ApiResponse = await ApiService.Get("weatherforecast");
        await InvokeAsync(StateHasChanged);
    }
    private void OnKeyDownChat(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            TestOllamaApi();
        }
    }
    private void OnKeyDownVoice(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            TestVoice();
        }
    }
    private async void TestVoice()
    {
        // run a bash script and then play an audio file
        VoiceLoading = true;
        var _text = VoiceRequest;
        VoiceRequest = string.Empty;
        await InvokeAsync(StateHasChanged);
        string path = await VoiceService.GenerateAudio(_text);
        VoiceLoading = false;
        await InvokeAsync(StateHasChanged);
        await JSRuntime.InvokeVoidAsync("PlayAudio", path);
    }
    private async void TestOllamaApi()
    {
        if (string.IsNullOrWhiteSpace(OllamaRequest)) return;
        ChatService.SendMessage(OllamaRequest);
        OllamaRequest = string.Empty;
        ChatLoading = true;
        await InvokeAsync(StateHasChanged);
    }
}
