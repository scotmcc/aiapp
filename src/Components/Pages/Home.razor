@page "/"

<h3>System Test!</h3>

<div class="input-group input-group-sm mt-3">
    <span class="input-group-text">API URL</span>
    <textarea class="form-control">@ApiResponse</textarea>
    <button class="btn btn-outline-primary" type="button" @onclick="TestApi">
        <i class="fas fa-redo"></i>
    </button>
</div>

<div class="mt-3 card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Ollama Chat</h5>
        <button class="btn btn-outline-danger" type="button" @onclick="ResetChat">
            <i class="fas fa-undo"></i>
        </button>
    </div>
    <div class="card-body" style="height: 300px;">
        @foreach (var message in Messages)
        {
            <div class="message">
                <strong>@message.Role:</strong> @message.Content
            </div>
        }
    </div>
    <div class="card-footer d-flex input-group input-group-sm">
        <textarea class="form-control" @bind="OllamaRequest" @bind:event="oninput" @onkeydown="OnKeyDown"></textarea>
        <button class="btn btn-outline-primary" type="button" @onclick="TestOllamaApi">
            <i class="fas fa-paper-plane"></i>
        </button>
    </div>
</div>

@inject IApiService ApiService
@inject OllamaApiClient ollama

@code {
    private string ApiResponse { get; set; } = string.Empty;
    private string OllamaResponse { get; set; } = string.Empty;
    private string OllamaRequest { get; set; } = string.Empty;
    private List<Message> Messages { get; set; } = [ new Message { Role = "system", Content = "You are a helpful assistant."} ];
    [Inject] private IHttpClientFactory HttpClientFactory { get; set; } = default!;
    private async void TestApi()
    {
        ApiResponse = await ApiService.Get("weatherforecast");
        await InvokeAsync(StateHasChanged);
    }
    private void OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            TestOllamaApi();
        }
    }
    private void ResetChat() {
        Messages.Clear();
        Messages.Add(new Message { Role = "system", Content = "You are a helpful assistant." });
        OllamaRequest = string.Empty;
        ApiResponse = string.Empty;
        StateHasChanged();
    }
    private async void TestOllamaApi()
    {
        Messages.Add(new Message
        {
            Role = "user",
            Content = OllamaRequest
        });
        OllamaRequest = string.Empty;
        await InvokeAsync(StateHasChanged);
        ChatRequest request = new()
        {
            Messages = Messages,
            Options = new()
            {
                Temperature = 0.7f
            }
        };
        var response = await ollama.ChatAsync(request).StreamToEndAsync() ??
        throw new Exception("Failed to get a response from the API.");
        Messages.Add(response.Message);
        await InvokeAsync(StateHasChanged);
    }
}
