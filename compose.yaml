services:

  tailscale:
    image: tailscale/tailscale:latest
    container_name: tailscale
    hostname: ${HOSTNAME}
    restart: unless-stopped
    network_mode: "host"
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - TS_AUTHKEY=${TS_AUTHKEY}
      - TS_HOSTNAME=${HOSTNAME}
      - TS_STATE_DIR=/var/lib/tailscale
      - TS_SERVE_CONFIG=/config/aiapp.json
    volumes:
      - /var/run/tailscale:/var/run/tailscale
      - /dev/net/tun:/dev/net/tun
      - ./docker/tailscale/data:/var/lib/tailscale
      - ./docker/tailscale/config:/config
    devices:
      - /dev/net/tun:/dev/net/tun

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: unless-stopped
    network_mode: service:tailscale
    depends_on:
      - tailscale
      - webui
    volumes:
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/nginx/html:/usr/share/nginx/html
      - ./docker/nginx/logs:/var/log/nginx
    environment:
      - NGINX_HOST=${HOSTNAME}
      - NGINX_PORT=80

  postgres:
    image: postgres:latest
    container_name: postgres
    restart: unless-stopped
    network_mode: service:tailscale
    depends_on:
      - tailscale
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./docker/postgres/data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: unless-stopped
    network_mode: service:tailscale
    depends_on:
      - tailscale
      - postgres
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
      - PGADMIN_LISTEN_PORT=5050
    volumes:
      - ./docker/pgadmin:/var/lib/pgadmin

  qdrant:
    image: qdrant/qdrant:latest
    restart: unless-stopped
    container_name: qdrant
    network_mode: service:tailscale
    depends_on:
      - tailscale
    volumes:
      - ./docker/qdrant/config:/qdrant/config
      - ./docker/qdrant/storage:/qdrant/storage

  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    network_mode: service:tailscale
    depends_on:
      - tailscale
    volumes:
      - ./docker/redis/data:/data

  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: redisinsight
    restart: unless-stopped
    network_mode: service:tailscale
    depends_on:
      - tailscale
      - redis
    volumes:
      - ./docker/redisinsight:/data
    environment:
      - RI_PROXY_PATH=/redis

  webui:
    image: mcr.microsoft.com/dotnet/sdk:9.0
    container_name: webui
    restart: unless-stopped
    network_mode: service:tailscale
    depends_on:
      - tailscale
      - postgres
      - qdrant
      - redis
    volumes:
      - ./src:/app
      - obj:/app/obj/
      - bin:/app/bin/
      - ./docker/webui/keys:/root/.aspnet/DataProtection-Keys
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - API_BASE_URL=${API_BASE_URL}
      - REDIS_CONNECTION_STRING=${REDIS_CONNECTION_STRING}
      - OLLAMA_API_URL=${OLLAMA_API_URL}
      - OLLAMA_BASE_MODEL=${OLLAMA_BASE_MODEL}
      - OLLAMA_CHAT_MODEL=${OLLAMA_CHAT_MODEL}
      - OLLAMA_AGENT_MODEL=${OLLAMA_AGENT_MODEL}
    command: [ "dotnet", "run", "--project", "/app/AIApp.csproj", "--urls", "http://+:5000" ]
    develop:
      watch:
        - action: restart
          path: ./src
          ignore:
            - '**/bin/*'
            - '**/obj/*'
            - '**/wwwroot/audio/*'
        - action: sync
          path: ./voice/output
          target: /app/wwwroot/audio

volumes:
  obj:
  bin:
